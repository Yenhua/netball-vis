<html>
<head>
<title>BarChartsTest</title>
<script src="http://d3js.org/d3.v3.min.js"
charset="utf-8"></script>
<script src="js/loadData.js"></script>
<script src="js/renderBarChart.js"></script>
<script src="http://d3js.org/queue.v1.min.js"></script>
<!-- <script src="js/table.js"></script> -->
<style type text/css></style>


</head>
<body onload="loadAll('bar');">

</body>

<script src="jquery-csv.js"></script>

<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 15px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}`

.bar {
  fill: steelblue;
}

.x.axis path {
  display: none;
}

.backButton{ width: 85px; margin-left:0px;margin-top:9px;}


</style>
<div class = "backButton">
  <button onclick="back()">Back</button>
</div>
 

<body>
<svg id="body" width="950" height="500"></svg>


<script>
var margin = {top: 20, right: 20, bottom: 140, left: 80},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x0 = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);//

var x1 = d3.scale.ordinal();

var y = d3.scale.linear()
    .range([height, 0]);

var colorArray = ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"];

var color = d3.scale.ordinal()
    .range(colorArray);

var xAxis = d3.svg.axis()
    .scale(x0)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(d3.format("d"));//still leaves ticks for non integers

var svg = d3.select("#body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var selectedYear = "2008";

var highlight = false;

var showPlayoff = true;//default displays ALL data

 //this must be called from the d3.csv block in loadData.js
function drawBarChart(){


  //first process data into an acceptable format for d3 libraries
  //console.log(typeof(graphData));
  var tempData = [];

  var curTeamWins;

  if(showPlayoff == true){
    curTeamWins = yearToWins[selectedYear];
  }else{
    curTeamWins = groupYearToWins[selectedYear];
  }

  for(var key in teamWins){

    //add all the information for now
  var tempEntry = {};//we can add to this object, then push to tempData, just need to consider which data to push

    tempEntry["Team"] = key;//team name
    tempEntry["Total Wins"] = curTeamWins[key][4];//home + away wins = total
    tempEntry["Home Wins"] = curTeamWins[key][0];
    tempEntry["Away Wins"] = curTeamWins[key][1];
     tempEntry["Same Country Wins"] = curTeamWins[key][2];
  tempEntry["Different Country Wins"] = curTeamWins[key][3];
    tempData.push(tempEntry);//may sort this data later

  }

  data = tempData;
  var legendNames = d3.keys(data[0]).filter(function(key) { return key !== "Team"; });//A and B

  data.forEach(function(d) {
    d.legends = legendNames.map(function(name) { return {name: name, value: +d[name]}; });
  });



  x0.domain(data.map(function(d) { return d.Team; }));//need to modify this

  x1.domain(legendNames).rangeRoundBands([0, x0.rangeBand()]);
  y.domain([0, d3.max(data, function(d) { return d3.max(d.legends, function(d) { return d.value; }); })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
      .selectAll("text")  //we can transform the labels for the x ais here
            .style("text-anchor", "end")
            // .attr("dx", "10em")
            // .attr("dy", "2em")
            .attr("transform", "rotate(-45)");//rotate a negative degrees so the text won't go above the axis
            // .attr("transform", function(d) {
            //     return "rotate(20)"
            //     });
      // .append("text")
      // .attr("text-anchor", "end")
      // .attr("x", width)
      // .text("Teams");



  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", -40)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Wins");//label for y axis

  var team = svg.selectAll(".team")
      .data(data)
    .enter().append("g")//each group is in a g
      .attr("class", "g")
      .attr("transform", function(d) { return "translate(" + x0(d.Team) + ",0)"; });

  team.selectAll("rect")
      .data(function(d) { return d.legends; })
    .enter()
    .append("rect")
    .transition()
    .attr("class", "team")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) {return x1(d.name); })
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function(d) { return color(d.name); });




    var legend = svg.selectAll(".legend")
      .data(legendNames.slice().reverse())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });



}




function update(){
  //update the data and graph with transitions

  //first update the current year
 selectedYear = document.getElementById("yearSelect").value;



// console.log("old data:")
// console.log(data);
  var tempData = updateData();

//console.log("new data:");
  data = tempData;
 //  console.log(data);
  //redrawthe graph with transitions
  var legendNames = d3.keys(data[0]).filter(function(key) { return key !== "Team"; });//A and B


  data.forEach(function(d) {
    d.legends = legendNames.map(function(name) { return {name: name, value: +d[name]}; });
  });



  x0.domain(data.map(function(d) { return d.Team; }));//need to modify this if we're sorting?

  x1.domain(legendNames).rangeRoundBands([0, x0.rangeBand()]);
  y.domain([0, d3.max(data, function(d) { return d3.max(d.legends, function(d) { return d.value; }); })]);



 var transition = svg.transition().duration(750);



 transition.select(".y.axis")
        .call(yAxis);

transition.select(".x.axis")
        .call(xAxis)
         .selectAll("text")
            .style("text-anchor", "end")
            //.style("stroke", "blue")
            .attr("transform", "rotate(-45)");//apply the same transformations as the text

if(highlight==true){
  svg.selectAll('.tick').each(function(d, i) {
    // In here, d is the ordinal value associated with each tick
    // and 'this' is the dom element

    var tickString = d.toString();

    if(tickString.match(/[a-z]/i)) {// alphabet letters found
      var countryID = teamID[d];
    // console.log(countryID);

    if(countryID.indexOf("NZ")>-1){
      //it's a NZ team
       d3.select(this).style("stroke", "blue")
      .attr("class","high");
    }else if(countryID.indexOf("AUS")>-1){//AUZ Team
       d3.select(this).style("stroke", "green")
      .attr("class","high");
    }
    }





  });


}else{
  svg.selectAll(".high").remove();
}




transition.selectAll(".team")
.style("opacity", 0);


transition.selectAll(".team")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) {return x1(d.name); })
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function(d) { return color(d.name); });

transition.selectAll(".team")
.style("opacity", 1);

transition.selectAll("g.g")//each group is contained in a g element
   .attr("transform", function(d) { return "translate(" + x0(d.Team) + ",0)"; });

}

  var showTotal;
  var showHome;
  var showAway;
  var showSame;
  var showDiff;

function updateData(){


  if(highlight==true){
    svg.selectAll(".high").remove();
  }

  showTotal = document.getElementById("checkTotal").checked;
  showHome = document.getElementById("checkHome").checked;
  showAway = document.getElementById("checkAway").checked;
  showSame = document.getElementById("checkSame").checked;
  showDiff = document.getElementById("checkDiff").checked;


  var newColorArray = ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"];
  var tempData = [];

  //modify this depending if playoff data is included or not
  var curTeamWins;
  if(showPlayoff == true){
    curTeamWins = yearToWins[selectedYear];
  }else{
    curTeamWins = groupYearToWins[selectedYear];
  }
  


  for(var key in curTeamWins){

    var tempEntry = {};//we can add to this object, then push to tempData, just need to consider which data to push

   //may have if statements to see what to add to display
    tempEntry["Team"] = key;//team name

    if(showTotal){
      newColorArray[0] = colorArray[0];
      tempEntry["Total Wins"] = curTeamWins[key][4];
    }
    else{
      newColorArray[0] = "transparent";
    }

    if(showHome){
      newColorArray[1] = colorArray[1];
      tempEntry["Home Wins"] = curTeamWins[key][0];
    }
    else{
      newColorArray[1] = "transparent";
    }

    if(showAway){
      newColorArray[2] = colorArray[2];
      tempEntry["Away Wins"] = curTeamWins[key][1];
    }
    else{
      newColorArray[2] = "transparent";
    }

    if(showSame){
      newColorArray[3] = colorArray[3];
      tempEntry["Same Country Wins"] = curTeamWins[key][2];
    }
    else{
      newColorArray[3] = "transparent";
    }

    if(showDiff){
      newColorArray[4] = colorArray[4];
      tempEntry["Different Country Wins"] = curTeamWins[key][3];
    }
    else{
      newColorArray[4] = "transparent";
    }
    tempData.push(tempEntry);

  }//end for
  color = d3.scale.ordinal()
    .range(newColorArray);



  tempData = sortData(tempData);
    //we have the data, now let's sort it

  return tempData;
  }

function sortData(unsorted){

  var sorted = [];
  var sortType = "";


  if(document.getElementById("unsort").checked){
    return unsorted;
  }

  if(document.getElementById("sortTotal").checked){

    if(showTotal==false){
      alert("Attempting to sort by total wins but total wins have been filtered out. No sorting will be supplied.");
      return unsorted;
    }
     sorted = unsorted.sort(function(a,b){
      return b["Total Wins"] - a["Total Wins"];
    });


  }
  else if(document.getElementById("sortHome").checked){

    if(showHome==false){
      alert("Attempting to sort by home wins but home wins have been filtered out. No sorting will be supplied.");
      return unsorted;
    }

    sorted = unsorted.sort(function(a,b){

      return b["Home Wins"] - a["Home Wins"];
    });
  }
  else if(document.getElementById("sortAway").checked){

    if(showAway==false){
      alert("Attempting to sort by away wins but away wins have been filtered out. No sorting will be supplied.");
      return unsorted;
    }

    sorted = unsorted.sort(function(a,b){
      return b["Away Wins"] - a["Away Wins"];
    });
  }
  else if(document.getElementById("SortSame").checked){

    if(showSame==false){
      alert("Attempting to sort by same country wins but same country wins have been filtered out. No sorting will be supplied.");
      return unsorted;
    }

    sorted = unsorted.sort(function(a,b){
      return b["Same Country Wins"] - a["Same Country Wins"];
    });
  }
  else if(document.getElementById("SortDiff").checked){

    if(showDiff==false){
      alert("Attempting to sort by different country wins but different country wins have been filtered out. No sorting will be supplied.");
      return unsorted;
    }

    sorted = unsorted.sort(function(a,b){
      return b["Different Country Wins"] - a["Different Country Wins"];
    });
  }

   //console.log(sorted);

return sorted;
}//end sort


function changeYear(){

document.getElementById("checkTotal").checked = "checked";
document.getElementById("checkHome").checked = "checked";
document.getElementById("checkAway").checked = "checked";
document.getElementById("checkSame").checked = "checked";
document.getElementById("checkDiff").checked = "checked";

update();

    var temp = svg.selectAll("g").remove();




  selectedYear = document.getElementById("yearSelect").value;
  console.log(selectedYear);
  drawBarChart();
  update();

}


function initDropMenu(){
  var newDiv=document.createElement('div');

  var yearArray = [];
  for(var key in allData){//for each should loop in order of keys added when data is loaded
    yearArray.push(key);
  }
  yearArray.push("all");
  var html = '<select id = "yearSelect">', yearArray , i;


    for(i = 0; i < yearArray .length; i++) {
        html += "<option value='"+yearArray [i]+"'>"+yearArray [i]+"</option>";
    }
    html += '</select>';
    newDiv.innerHTML= html;
    document.getElementById("year").appendChild(newDiv);
}

//toggles between highlight NZ and AUS teams
function hl(){
  var oldOption;

if(highlight==true){
  oldOption = true;
}
else{
  oldOption = false;
}


  if(oldOption==false){
    highlight = true;
  }
  else{
    highlight = false;
  }

  update();
}

function togglePlayoff(){
  document.getElementById("checkTotal").checked = "checked";
document.getElementById("checkHome").checked = "checked";
document.getElementById("checkAway").checked = "checked";
document.getElementById("checkSame").checked = "checked";
document.getElementById("checkDiff").checked = "checked";
update();


  var oldOption;

if(showPlayoff==true){
  oldOption = true;
}
else{
  oldOption = false;
}


  if(oldOption==false){
    showPlayoff = true;
     //update the inner html...
  var htmlString = document.getElementById("group").innerHTML;
  htmlString = htmlString.replace("excluded","included");
  

  document.getElementById("group").innerHTML = htmlString;
  }
  else{
    showPlayoff = false;
     var htmlString = document.getElementById("group").innerHTML;
     htmlString = htmlString.replace("included","excluded");

  document.getElementById("group").innerHTML = htmlString;
  }


  var temp = svg.selectAll("g").remove();




  selectedYear = document.getElementById("yearSelect").value;
  console.log(selectedYear);
  drawBarChart();
  update();
}

function back(){
  location.href = "index.html";
}



</script>







<form>



  Legend Filtering:
    <div>
        <label><input type="checkbox" checked="checked" id="checkTotal"/> Total Wins</label>
        <label><input type="checkbox" checked="checked" id="checkHome"/> Home Wins</label>
        <label><input type="checkbox" checked="checked" id="checkAway"/> Away Wins</label>
        <label><input type="checkbox" checked="checked" id="checkSame"/> Same Country Wins</label>
        <label><input type="checkbox" checked="checked" id="checkDiff"/> Different Country Wins</label>
        <button type="button" onclick="update();" id = "u1">Update Filters and apply sorting</button>

    </div>
    Sorting:
    <div>
        <label><input type="radio" name="sort" id="sortTotal"/> Total Wins</label>
        <label><input type="radio" name="sort" id="sortHome"/> Home Wins</label>
        <label><input type="radio" name="sort" id="sortAway"/> Away Wins</label>
        <label><input type="radio" name="sort" id="SortSame"/> Same Country Wins</label>
        <label><input type="radio" name="sort" id="SortDiff"/> Different Country Wins</label>
        <label><input type="radio" checked="checked" name="sort" id="unsort"/>No sorting</label>
    </div>

    Year Selection (will reenable all filters):
    <div id="year">
    </div>
    <button type="button" onclick="changeYear();" id = "t">Chnage Year</button>
</form>


<form>
  Toggle Highlight  <span style="color:blue;font-weight:bold">New Zealand</span> and <span style="color:green;font-weight:bold">Australian</span> Teams
    <div>
      <button type="button" onclick="hl();" id = "highlight">Highlight</button>
    </div>
</form>
<form id= "group">
   Toggle show/hide playoff data (will reenable all filters). Currently: <span style="font-weight:bold">playoffs included</span>
    <div>
      <button type="button" onclick="togglePlayoff();" id = "showPlayoff">Toggle</button>
    </div>
</form>


</html>
